// Code generated by re2c 2.2 on Mon Dec  6 20:58:06 2021, DO NOT EDIT.
package lexer

import "bytes"
import "github.com/masp/hoser/token"

func (s *Scanner) lex() (pos token.Pos, tok token.Token, lit string, err error) {
	pos = token.Pos(s.cursor)
	lit = ""
	for {
		s.token = s.cursor

		{
			var yych byte
			yyaccept := 0
			yych = s.text[s.cursor]
			if yych <= '0' {
				if yych <= '!' {
					if yych <= '\n' {
						if yych <= 0x00 {
							goto yy2
						}
						if yych <= 0x08 {
							goto yy4
						}
						if yych <= '\t' {
							goto yy6
						}
						goto yy9
					} else {
						if yych <= '\r' {
							if yych <= '\f' {
								goto yy4
							}
							goto yy11
						} else {
							if yych == ' ' {
								goto yy6
							}
							goto yy4
						}
					}
				} else {
					if yych <= '+' {
						if yych <= '\'' {
							if yych <= '"' {
								goto yy12
							}
							goto yy4
						} else {
							if yych <= '(' {
								goto yy14
							}
							if yych <= ')' {
								goto yy16
							}
							goto yy4
						}
					} else {
						if yych <= '-' {
							if yych <= ',' {
								goto yy18
							}
							goto yy4
						} else {
							if yych <= '.' {
								goto yy20
							}
							if yych <= '/' {
								goto yy4
							}
							goto yy21
						}
					}
				}
			} else {
				if yych <= '`' {
					if yych <= '=' {
						if yych <= ':' {
							if yych <= '9' {
								goto yy22
							}
							goto yy25
						} else {
							if yych <= ';' {
								goto yy27
							}
							if yych <= '<' {
								goto yy4
							}
							goto yy29
						}
					} else {
						if yych <= 'Z' {
							if yych <= '@' {
								goto yy4
							}
							goto yy31
						} else {
							if yych == '_' {
								goto yy31
							}
							goto yy4
						}
					}
				} else {
					if yych <= 's' {
						if yych <= 'i' {
							if yych <= 'h' {
								goto yy31
							}
							goto yy34
						} else {
							if yych <= 'q' {
								goto yy31
							}
							if yych <= 'r' {
								goto yy35
							}
							goto yy36
						}
					} else {
						if yych <= '{' {
							if yych <= 'z' {
								goto yy31
							}
							goto yy37
						} else {
							if yych == '}' {
								goto yy39
							}
							goto yy4
						}
					}
				}
			}
		yy2:
			s.cursor += 1
			{
				tok = token.Eof
				return
			}
		yy4:
			s.cursor += 1
		yy5:
			{
				err = ErrBadToken
				return
			}
		yy6:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == '\t' {
				goto yy6
			}
			if yych == ' ' {
				goto yy6
			}
			{
				continue
			}
		yy9:
			s.cursor += 1
			{
				if s.lexEol() == token.Semicolon {
					s.cursor = s.token // Has the effect of "inserting" the semicolon in the input
					tok = token.Semicolon
					lit = "\n"
					return
				} else {
					s.file.AddLine(int(pos))
					continue
				}
			}
		yy11:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == '\n' {
				goto yy9
			}
			goto yy5
		yy12:
			s.cursor += 1
			{
				return s.lexString('"')
			}
		yy14:
			s.cursor += 1
			{
				tok = token.LParen
				lit = "("
				return
			}
		yy16:
			s.cursor += 1
			{
				tok = token.RParen
				lit = ")"
				return
			}
		yy18:
			s.cursor += 1
			{
				tok = token.Comma
				lit = ","
				return
			}
		yy20:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= '/' {
				goto yy5
			}
			if yych <= '9' {
				goto yy41
			}
			goto yy5
		yy21:
			yyaccept = 0
			s.cursor += 1
			s.marker = s.cursor
			yych = s.text[s.cursor]
			if yych <= '9' {
				if yych == '.' {
					goto yy41
				}
				if yych <= '/' {
					goto yy5
				}
				goto yy44
			} else {
				if yych <= 'E' {
					if yych <= 'D' {
						goto yy5
					}
					goto yy47
				} else {
					if yych == 'e' {
						goto yy47
					}
					goto yy5
				}
			}
		yy22:
			yyaccept = 1
			s.cursor += 1
			s.marker = s.cursor
			yych = s.text[s.cursor]
			if yych <= '9' {
				if yych == '.' {
					goto yy41
				}
				if yych >= '0' {
					goto yy22
				}
			} else {
				if yych <= 'E' {
					if yych >= 'E' {
						goto yy47
					}
				} else {
					if yych == 'e' {
						goto yy47
					}
				}
			}
		yy24:
			{
				tok = token.Integer
				lit = s.literal()
				return
			}
		yy25:
			s.cursor += 1
			{
				tok = token.Colon
				lit = ":"
				return
			}
		yy27:
			s.cursor += 1
			{
				tok = token.Semicolon
				lit = ";"
				return
			}
		yy29:
			s.cursor += 1
			{
				tok = token.Equals
				lit = "="
				return
			}
		yy31:
			s.cursor += 1
			yych = s.text[s.cursor]
		yy32:
			if yych <= 'Z' {
				if yych <= '/' {
					goto yy33
				}
				if yych <= '9' {
					goto yy31
				}
				if yych >= 'A' {
					goto yy31
				}
			} else {
				if yych <= '_' {
					if yych >= '_' {
						goto yy31
					}
				} else {
					if yych <= '`' {
						goto yy33
					}
					if yych <= 'z' {
						goto yy31
					}
				}
			}
		yy33:
			{
				tok = token.Ident
				lit = s.literal()
				return
			}
		yy34:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'n' {
				goto yy48
			}
			goto yy32
		yy35:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'e' {
				goto yy49
			}
			goto yy32
		yy36:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 't' {
				goto yy50
			}
			goto yy32
		yy37:
			s.cursor += 1
			{
				tok = token.LCurlyBrack
				lit = "{"
				return
			}
		yy39:
			s.cursor += 1
			{
				tok = token.RCurlyBrack
				lit = "}"
				return
			}
		yy41:
			yyaccept = 2
			s.cursor += 1
			s.marker = s.cursor
			yych = s.text[s.cursor]
			if yych <= 'D' {
				if yych <= '/' {
					goto yy43
				}
				if yych <= '9' {
					goto yy41
				}
			} else {
				if yych <= 'E' {
					goto yy47
				}
				if yych == 'e' {
					goto yy47
				}
			}
		yy43:
			{
				tok = token.Float
				lit = s.literal()
				return
			}
		yy44:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= '9' {
				if yych == '.' {
					goto yy41
				}
				if yych >= '0' {
					goto yy44
				}
			} else {
				if yych <= 'E' {
					if yych >= 'E' {
						goto yy47
					}
				} else {
					if yych == 'e' {
						goto yy47
					}
				}
			}
		yy46:
			s.cursor = s.marker
			if yyaccept <= 1 {
				if yyaccept == 0 {
					goto yy5
				} else {
					goto yy24
				}
			} else {
				goto yy43
			}
		yy47:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= ',' {
				if yych == '+' {
					goto yy51
				}
				goto yy46
			} else {
				if yych <= '-' {
					goto yy51
				}
				if yych <= '/' {
					goto yy46
				}
				if yych <= '9' {
					goto yy52
				}
				goto yy46
			}
		yy48:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 't' {
				goto yy54
			}
			goto yy32
		yy49:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 't' {
				goto yy56
			}
			goto yy32
		yy50:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'r' {
				goto yy57
			}
			goto yy32
		yy51:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= '/' {
				goto yy46
			}
			if yych >= ':' {
				goto yy46
			}
		yy52:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= '/' {
				goto yy43
			}
			if yych <= '9' {
				goto yy52
			}
			goto yy43
		yy54:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= 'Z' {
				if yych <= '/' {
					goto yy55
				}
				if yych <= '9' {
					goto yy31
				}
				if yych >= 'A' {
					goto yy31
				}
			} else {
				if yych <= '_' {
					if yych >= '_' {
						goto yy31
					}
				} else {
					if yych <= '`' {
						goto yy55
					}
					if yych <= 'z' {
						goto yy31
					}
				}
			}
		yy55:
			{
				tok = token.IntType
				lit = "int"
				return
			}
		yy56:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'u' {
				goto yy58
			}
			goto yy32
		yy57:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'i' {
				goto yy59
			}
			goto yy32
		yy58:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'r' {
				goto yy60
			}
			goto yy32
		yy59:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'n' {
				goto yy61
			}
			goto yy32
		yy60:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'n' {
				goto yy62
			}
			goto yy32
		yy61:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych == 'g' {
				goto yy64
			}
			goto yy32
		yy62:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= 'Z' {
				if yych <= '/' {
					goto yy63
				}
				if yych <= '9' {
					goto yy31
				}
				if yych >= 'A' {
					goto yy31
				}
			} else {
				if yych <= '_' {
					if yych >= '_' {
						goto yy31
					}
				} else {
					if yych <= '`' {
						goto yy63
					}
					if yych <= 'z' {
						goto yy31
					}
				}
			}
		yy63:
			{
				tok = token.Return
				lit = "return"
				return
			}
		yy64:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= 'Z' {
				if yych <= '/' {
					goto yy65
				}
				if yych <= '9' {
					goto yy31
				}
				if yych >= 'A' {
					goto yy31
				}
			} else {
				if yych <= '_' {
					if yych >= '_' {
						goto yy31
					}
				} else {
					if yych <= '`' {
						goto yy65
					}
					if yych <= 'z' {
						goto yy31
					}
				}
			}
		yy65:
			{
				tok = token.StringType
				lit = "string"
				return
			}
		}

	}
}

func (s *Scanner) lexString(quote byte) (pos token.Pos, tok token.Token, lit string, err error) {
	var buf bytes.Buffer
	for {
		var u byte

		{
			var yych byte
			yych = s.text[s.cursor]
			if yych == '\n' {
				goto yy70
			}
			if yych == '\\' {
				goto yy72
			}
			s.cursor += 1
			{
				u = yych
				if u == quote {
					tok = token.String
					pos = token.Pos(s.token)
					lit = string(buf.Bytes())
					return
				}
				buf.WriteByte(u)
				continue
			}
		yy70:
			s.cursor += 1
		yy71:
			{
				err = ErrInvalidString
				return
			}
		yy72:
			s.cursor += 1
			yych = s.text[s.cursor]
			if yych <= 'b' {
				if yych <= '>' {
					if yych <= '"' {
						if yych <= '!' {
							goto yy71
						}
					} else {
						if yych == '\'' {
							goto yy75
						}
						goto yy71
					}
				} else {
					if yych <= '\\' {
						if yych <= '?' {
							goto yy77
						}
						if yych <= '[' {
							goto yy71
						}
						goto yy79
					} else {
						if yych <= '`' {
							goto yy71
						}
						if yych <= 'a' {
							goto yy81
						}
						goto yy83
					}
				}
			} else {
				if yych <= 'q' {
					if yych <= 'f' {
						if yych <= 'e' {
							goto yy71
						}
						goto yy85
					} else {
						if yych == 'n' {
							goto yy87
						}
						goto yy71
					}
				} else {
					if yych <= 't' {
						if yych <= 'r' {
							goto yy89
						}
						if yych <= 's' {
							goto yy71
						}
						goto yy91
					} else {
						if yych == 'v' {
							goto yy93
						}
						goto yy71
					}
				}
			}
			s.cursor += 1
			{
				buf.WriteByte('"')
				continue
			}
		yy75:
			s.cursor += 1
			{
				buf.WriteByte('\'')
				continue
			}
		yy77:
			s.cursor += 1
			{
				buf.WriteByte('?')
				continue
			}
		yy79:
			s.cursor += 1
			{
				buf.WriteByte('\\')
				continue
			}
		yy81:
			s.cursor += 1
			{
				buf.WriteByte('\a')
				continue
			}
		yy83:
			s.cursor += 1
			{
				buf.WriteByte('\b')
				continue
			}
		yy85:
			s.cursor += 1
			{
				buf.WriteByte('\f')
				continue
			}
		yy87:
			s.cursor += 1
			{
				buf.WriteByte('\n')
				continue
			}
		yy89:
			s.cursor += 1
			{
				buf.WriteByte('\r')
				continue
			}
		yy91:
			s.cursor += 1
			{
				buf.WriteByte('\t')
				continue
			}
		yy93:
			s.cursor += 1
			{
				buf.WriteByte('\v')
				continue
			}
		}

	}
}
